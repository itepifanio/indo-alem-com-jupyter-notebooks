---
title: "Indo além com Jupyter Notebooks"
subtitle: "Bem vindo! Esse tutorial irá mostrar como utilizar Jupyter notebooks para publicar pacotes Python & mais"
format:
  revealjs:
    slide-number: true
    css: styles.css
    footer: Indo além com Jupyter Notebooks
---

## Olá, sou o Ítalo Epifânio {.smaller}

::: {.fragment}
- Rio Grandense da trombinha do elefante
![](images/mapa-pau-dos-ferros.png){.absolute top=0 right=0 width=350 height=238}
:::
::: {.fragment}
- Cientista da Computação*
- RnD Python Developer
- Desenvolvedor Open Source
:::

::: {.fragment}
- Contribuidor da comunidade Python (Grupy RN)
![](images/grupyrn.png){.absolute top=250 right=0}
:::

## Sumário {.smaller}

Esse tutorial irá:

- Introduzir os principais conceitos para publicar um pacote Python
- Discutir o sistema de pacotes Python e como distribui-los
- Explicar o conceito de programação letrada
- Mostrar como utilizar Jupyter notebook e Jupyter lab
- Introduzir a biblioteca Nbdev
- Explicar boas práticas de desenvolvimento em notebooks

## Sumário {.smaller}

- Mostrar algumas ferramentas para assegurar qualidade de código
- Discutir como rodar testes em software
- Mostrar como e onde publicar
- Introduzir o uso de Github Actions e CI/CD

- Bônus (se o tempo permitir):
    - Falar sobre pacotes python (passado e futuro)
    - Introduzir como construir UI para Jupyter notebooks
    - Mostrar como customizar documentações utilizando Quarto
    - Demonstrar como utilizar ChatGPT em notebooks

# Pacotes Python

Vamos introduzir/revisar alguns conceitos chaves para entender pacotes python e sua estrutura

## Módulos

> Módulos são arquivos que contem definições e declarações Python 
 [Python Docs](https://docs.python.org/3/tutorial/modules.html#modules)

Qualquer arquivo `.py` pode ser considerado um módulo

```python
%%writefile module.py

def hello(name):
    print(f'hello, {name}')
```

```python
import module

module.hello("audience!")
```

## Módulo

Módulos também podem ser executados como scripts python:

```python
%%writefile module.py

def hello(name):
    print(f'hello, {name}')

if __name__ == "__main__":
    import sys
    hello(sys.argv[1])
```

```python
! python module.py 'Maria'
```

::: {.callout-note}
O condicional `if __name__ == "__main__"` verifica que a função `hello` será executada 
somente quando o módulo estiver sendo executado como o arquivo principal (`main`)
:::

## Sistema de busca de módulos

O interpretador Python primeiro busca:

- Nos módulos built-in (listados em `sys.builtin_module_names`)
- Nos arquivos `.py` do diretório atual (`sys.path`)

## Pacotes Python

> É uma forma de estruturar namespaces no Python utilizando nomes de módulos separados por pontos 
 [Python Docs](https://docs.python.org/3/tutorial/modules.html#packages)

Pacotes podem ser entendidos como uma coleção de módulos. Verifique a seguinte estrutura:

```
somefolder/
    package/
        __init__.py
        module1.py
        subpackage/
            module2.py
```

## Sistema de busca por pacote

Quando importa-se pacotes, o interpretador Python busca por diretórios listados em `sys.path`

# Por que utilizar pacotes?

Vamos discutir os prós e contras de utilizar pacotes

## Por que utilizar pacotes?

Vamos pensar no filme "Vingadores" como um grande pacote com diversos super heróis (Hulk, Viúva Negra, Thor, etc).

```{mermaid}
flowchart LR
  subgraph avengers1
    A["Vingadores\n (Hulk, Víuva Negra, Thor)"]
  end

  subgraph avengers2
   direction TB
    B["Hulk"] --> C["Vingadores"]
    D["Thor"] --> C
    E["Viúva Negra"] --> C
  end

  avengers1 --> avengers2
```

:::{.callout-note}
Exemplo da palestra [Arquitetura Modular com pacotes Python](https://www.youtube.com/watch?v=Ccw9Dlw9b2c) apresentado na Python Brazil, 2022
:::

:::{.notes}
Para utilizar super heróis em diversas linhas do tempo a duplicação de código seria necessária no avengers1, o que aumentaria a complexidade do código.
A ideia de criar pacotes para cada super-herói permite combinar eles em diferentes filmes.
::: 

## Prós e contras

::: {.columns}

::: {.column width="50%"}
- Aumenta reuso de código
- Diminui acoplamento 
- Facilita com que outros desenvolvedores usem o código
- Divide a responsabilidade entre times
- Pode facilitar a manutenção
:::

::: {.column width="50%"}
- Gestão de dependencia pode ser custosa
- É difícil garantir a segurança de códigos de terceiros
- Pacotes podem ter mais funcionalidades que as necessárias
:::

:::

## Como publicar? {.smaller}

Como publicar pacotes no PyPI e então baixar?

```{mermaid}
flowchart TD
  A["Arquivos do pacote (setup.py, pyproject.toml)"] --> B["Montar backend (sdist, wheel)"]
  B --> C["Artefato do pacote (.tar.gz, .whl)"]
  C --> D["Upload utilizando o Twine (Pypi, TestPypi)"]
```

# Pypi

Python Package Index

## Ferramental

- [pip](https://packaging.python.org/en/latest/key_projects/#pip) é o oficial e mais popular gerenciador de pacotes Python
- [PyPI](https://pypi.org/) é o catalogo de onde o pip baixa os arquivos
- [Test PyPI](https://packaging.python.org/en/latest/guides/using-testpypi/) um catalogo separado para testes

:::{.callout-note}
Crie sua conta em https://test.pypi.org, vamos utilizar ele para publicar um pacote
:::

## Outros repositórios Python

Existem outros respositórios além do PyPI e Test PyPI

- [Pypiserver](https://github.com/pypiserver/pypiserver) local ou auto-hospedagem
- [JFrog](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) auto-hospedagem ou cloud, solução completa de cloud
- [Code artifacts](https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html) repositório da AWS 
- [Artifact registry](https://cloud.google.com/artifact-registry/docs/python/store-python) repositório da Google 
- [Gitlab package registry](https://docs.gitlab.com/ee/user/packages/pypi_repository/) repositório do Gitlab

# Programação Letrada

Paradigma em que você conda uma história com seu código

## Programação Letrada {.smaller}

:::: {.columns} 

::: {.column width="30%"}
- Paradigma de programação
- Haskell `.lhs` vs `.hs`
- Sua utilização aumentou nos últimos anos
- Jupyter notebooks, R Studio
:::

::: {.column width="70%"}
![](images/donald-knuth-quote.png)
:::

::::

## Programação Letrada

```{mermaid}
flowchart
  A["WEB (linguagem e programas)"] -- "WEAVE (processador)" --> B["TEX"]
  A -- "TANGLE (processador)" --> C["PAS"]
  C -- PASCAL --> D["REL (arquivo binário que pode ser executado)"]
  B -- LATEX --> E["DVI (Arquivo binário independente)"]
```

## Literate programming

```{mermaid}
flowchart
  A["Jupyter Notebook"] -- "Quarto" --> B["MD"]
  A -- "Nbdev" --> C["PY"]
  B -- PANDOC --> E["PDF/HTML/DOCX"]
```

## Introdução a jupyter notebook {.smaller}

![](images/monitor.png){.absolute top=0 right=0}

- Crie um repositório Github vazio (não adicione readme, .gitignore ou licença)
- Clone o repositório localmente e acesse sua raiz
- Crie seu ambiente virtual `python -m venv venv`
- Ative-o utilizando `source venv/bin/activate`
- Instale as dependências necessárias `pip install nbdev notebook`
- Execute `jupyter-notebook`

::: {.callout-tip collapse="true"}
## UI

- [Jupyter Lab](https://jupyterlab.readthedocs.io/en/stable/) é uma das ferramentas mais populares
- Instale a biblioteca utilizando `pip install jupyterlab` e execute `jupyter-lab` para ver sua interface

Existem outras interfaces, como o plugin VSCode que renderiza notebooks, mas eu recomendo utilizar notebooks clássicos 
nesse tutorial por ter uma interface mais simplificada
:::

# Nbdev

Utilizando Jupyter notebooks para publicar pacotes Python

## Nbdev

![](images/card.png)

## Setup {.smaller}

![](images/monitor.png){.absolute top=0 right=0}

- Execute `nbdev_new --lib_name {username}_pacote`
- Verifique as informações em `settings.ini`
- Realize o commit das alterações: `git add . && git commit -m "Commit inicial" && git push origin main`
- Instale o pacote localmente utilizando `pip install -e .[dev]`
- Execute `nbdev_install_hooks`
- Execute `nbdev_install_quarto`

:::{.callout-note}
Vamos nos familiarizar com a estrutura nbdev (settings.ini, nbs/, setup.py)

Execute `nbdev_help` no seu terminal para verificar todos os comandos disponíveis
:::

## Nbdev comentários mágicos

- `#| hide`
- `#| export`
- `#| exporti`
- `#| exec_doc`
- `#| code-fold`
- `#| default_exp core`
- `#| eval: false`

## Nbdev awesome projects {.smaller}

- [FastAI](https://github.com/fastai/fastai)
- [Ipyannotator](https://github.com/palaimon/ipyannotator)
- [TSAI](https://github.com/timeseriesAI/tsai)
- [FastKafta](https://github.com/airtai/fastkafka)
- [Number Blog](https://github.com/crowdcent/numerblox)
- [UPIT](https://github.com/tmabraham/UPIT)
- [AskAI](https://github.com/radekosmulski/ask_ai)
- [Streamlit Jupyter](https://github.com/ddobrinskiy/streamlit-jupyter)
- [Banet](https://github.com/mnpinto/banet)

# Boas práticas

Melhores práticas com Jupyter notebook e nbdev

## Tipos de Jupyter notebook

![Saiba que tipo de notebook você está escrevendo (Sistema Diataxis)](https://documentation.divio.com/_images/overview.png)

## Bom título e subtítulo

Existem duas formas de fazer isso, a primeira com markdown:

```bash
# Meu título H1

> Minha descrição
```

Ou usando a sintaxe Quarto:

```bash
---
title: "Meu título"
description: "Minha descrição"
---
```

## Mude o texto de acordo com o tipo de notebook

- Referência: Inicie com uma descrição geral do componente, utilize links para facilitar navegação
- Tutorial e guias: Descreva ao leitor o que ele vai aprender e como. Seja objetivo
- Explicação: Breve explicação do tópico é suficiente para guiar o leitor durante a leitura

## Use visualizações {.smaller}

Jupyter notebooks são bastante interativos. Use e abuse de images, videos e audios

```{python}
import matplotlib.pyplot as plt
plt.plot([1,23,2,4])
plt.plot([8,65,23,90])
plt.show()
```

## Mantenha suas células pequenas

- Não existem regras para o tamanho das células, mas seja razoavel
- Use @patch `from fastcore.basics import patch`
- Melhore a testabilidade do notebook adicionando pequenos testes abaixo de cada célula de código

## Jupyter notebooks

- Mantenha seus imports no topo do notebook
- Não import bibliotecas e execute código python na mesma célula
- Evite ordens de execução ambíguas
- Use células para experimentar o código desenvolvido

## Documentação de parâmetros {.smaller}

Nbdev tem duas formas de documentação, a clássica (estilo numpy), como se segue:

```python
def add_np(a, b=0):
    """The sum of two numbers.

    Parameters
    ----------
    a : int
        the 1st number to add
    b : int
        the 2nd number to add (default: 0)
    """
    return a + b
```

## Documentação de parâmetros {.smaller}

```{python}
from nbdev.showdoc import show_doc

def add_np(a, b=0):
    """The sum of two numbers.

    Parameters
    ----------
    a : int
        the 1st number to add
    b : int
        the 2nd number to add (default: 0)
    """
    return a + b

show_doc(add_np)
```

## Doc parameters {.smaller}

E a abordagem nbdev chamada de "docments"

```python
def add(
    a: int,  # the 1st number to add
    b=0,  # the 2nd number to add
):
    "The sum of two numbers."
    return a + b
```

```{python}
from nbdev.showdoc import show_doc

def add(
    a: int,  # the 1st number to add
    b=0,  # the 2nd number to add
):
    "The sum of two numbers."
    return a + b

show_doc(add)
```

## Escreva testes

- A palavra chave `assert` pode ser utilizada para testes
- `nbdev_test`

```python
assert add(1, 1) == 2
```

# Dependências

Evite "dependency hell"

## Dependency Hell

- Quando um software cresce há uma tendência que mais bibliotecas sejam adicionadas
- Pacotes são massa: adicionam funcionalidades, evitam/corrigem erros
- Manutenção e atualização de pacotes pode ser desafiador
- Ex. Dependência 1 espera Python 3.7 e dependência 2 espera Python 3.9

## Especifique suas dependências

- ~= para releases específicas
- == para fixar uma versão
- != para excluir uma versão
- <=, >=, <, > para incluir um range de versões

## Releases

- Versionamento semântico é um conjunto de regras que pode evitar dependency hell
- Para isso a biblioteca DEVE declarar uma API pública compreensível
- O versionamento DEVE usar o formato X.Y.Z onde X, Y, Z são inteiros não negativos 
e cada elemento deve ser aumentando numericamente
- The version number MUST use the X.Y.Z format where X, Y, Z are 
- MAJOR.MINOR.PATCH

## Mantenha um changelog

- Versionamento semântico é bastante didático mas não é legível para humanos
- Changelog mantém uma ordem cronológica de modificações notáveis a cada versão do projeto
- Melhora a transparência
- Entendimento geral da direção do projeto por desenvolvedores ou não desenvolvedores
- Mantém uma lista de bugs resolvidos

# Garantia de qualidade

Melhore seu código utilizando ferramentas automatizadas

## NbQA

Existem diversas ferramentas de análise de código que:

- Evitam erros e más práticas de código (code smells)
- Definem estilo de código
- Melhoram a leitura
- Medem a qualidade de código

## NbQA

Ferramentas populares:

- Autopep8
- Black
- Flake8
- MyPy

Todas essas (e algumas outras) podem ser executadas utilizando NbQA

```bash
nbqa <tool-name> <tool-params>
```

## Autopep8

> Formatador de código que segue a [PEP 8](https://peps.python.org/pep-0008/)

Muito útil para limpar espaços em branco e realizar formação de código em notebooks

Execute o seguinte comando em seu terminal:

```bash
! nbqa autopep8 nbs/*.ipynb --in-place
```

# Publicando

Nbdev permite que publiquemos pacotes python utilizando sua CLI

## Conda and PyPI

- `nbdev_pypi`, `nbdev_conda`, `nbdev_release_both`
- [Menos documentado](https://github.com/fastai/nbdev/pull/1320) mas também permite publicar no Test PyPI (`nbdev_pypi --repository testpypi`)

## Chaves secretas

O sistema de pacote python usam o arquivo [.pypirc](https://packaging.python.org/en/latest/specifications/pypirc/) para definir os repositórios:

```toml
[distutils]
index-servers = testpypi

[testpypi]
repository=https://test.pypi.org/legacy/
username=<your-username>
password=<your-password>
```

## Chaves secretas

Username e senhas não são encorrajadas, considere gerar um token para seu pacote:

```toml
[distutils]
index-servers = testpypi

[testpypi]
repository=https://test.pypi.org/legacy/
username = __token__
password = <PyPI token>
```

# CI/CD

Vamos executar testes, ferramentas de QA e publicar nosso pacote utilizando Github Actions

## Integração Contínua/Entrega Contínua

- Conceito DevOps que recentemente se tornou mais acessível a todos os desenvolvedores
- Metodologia de frequentemente entregar novas versões de apps a clientes
- Automatiza etapas do processo de entrega de novas versões
- Garante segurança nessa entrega

## Integração Contínua/Entrega Contínua

```{mermaid}
flowchart LR
  subgraph CI
    A["Build"] --> B["Test"] --> C["Merge"]
  end
  
  subgraph CD
      D["Automatically release"] --> E["Automatically deploy"]
  end
  
  C --> D
```

## Ferramentas

- [Github Actions](https://github.com/features/actions)
- [Gitlab CI/CD](https://about.gitlab.com/)
- [Jenkins](https://www.jenkins.io/)
- [Circle CI](https://circleci.com/)

E várias outras

## Github Actions

- Fácil de usar
- Grátis até 2000 minutos/mês
- Maioria das ferramentas tem uma integração

## Github actions conceitos principains {.smaller}

- *Events*: É uma atividade específica do seu repositório Github que pode iniciar alguma ação. Por exemplo, abrir um PR, enviar um commit, etc 
- *Jobs*: Sequencia de passos que vão ser executados via shell script ou action. Jobs podem ser executados em paralelo ou sequencialmente
- *Action*: Aplicação customizada que usa a plataforma Github Action, normalmente automatiza alguma tarefa repetitiva como configurar um ambiente (ex. Python) ou gerenciar dependências mais complexas
- *Runner*: Servidor que executa os jobs. Cada runner executa um job de cada vez

## Github secrets & Test Pypi token {.smaller}

- Vamos criar um token para o nosso pacote

:::{.callout-note}
Na interface Test PyPI acesse `Account Settings >> Api Tokens >> Add Api Token`
:::

- Na interface do seu repositório Github acesse: `Settings >> Actions (at security tab) >> New repository secret` and add the token with the name `TEST_PYPI_API_TOKEN`

## Workflows

![](images/monitor.png){.absolute top=0 right=0}

Adicionando arquivos `.github/worflows/*.yaml`

## Publishing using CI

:::{.callout-note}
- Upgrade the version at `settings.ini`
- Update your changelog
- Commit and push your changes to Github
- Check if tests and lint are passing
- Create a new release at Github following the semantic versioning to use our CD of the package
:::

# Python Packaging history

Let's look at the past to discuss the future of Python packaging

## History 

::: {.incremental}
- Python 1 (1998-2000) didn't have a package manager
- Distutils was added to Python 1.6 using setup.py
- In 2003 setuptools was introduced as an improvement of distutils
- In 2004 easy_install was developed to be used alongside setuptools
- In 2008 the PyPA (Python Packaging Authority) was founded 
:::

## History

::: {.incremental}
- In 2011 `pip` became the default package manager
- In 2013 the `wheel` package was introduced
- In 2017 the `flit` package was developed, introducing `pyproject.toml`
- In 2020 the PEP 621 made `pyproject.toml` the standard way to develop packages
:::

# Quarto and Styling

[Quarto](quarto.org/) is an open source tool that allows creating content dinamically using Python, R, Julia and Observable. It was introduced to Nbdev recently

## Executing

Try to execute `quarto preview nbs/00_deck.ipynb` in your terminal

:::{.callout-note}
Quarto is already installed on our setup thanks to `nbdev_install_quarto`
:::

## Doc preview

Changing ports when rendering nbdev docs can be annoying, change `_quarto.yml` to fix a port and avoid opening new tabs.

```yaml
project:
  preview:
    port: 3000
    browser: false
```

## Doc navigation

Quarto allows easy customization of the navbar

```yaml
website:
  navbar:
    background: primary
      search: true
      collapse-below: lg
      left:
        - text: "My page"
          href: gettings_started.ipynb
      right:
        - icon: github
          href: "https://github.com/user/project"
```

## Google analytics

Activate analytics tracking but remember asking for cookie consent if your country legislation requires it

```yaml
website:
  google-analytics: "UA-XXXXXXXX"
  cookie-consent: true
```

## Dark mode

You can define the quarto theme to (de)activate dark mode

```yaml
format:
  html:
    theme:
      light: flatly
      dark: darkly
```

## Page navigation

Your project may require continuous page navigation

```yaml
website:
  page-navigation: true
```

## Reader mode

Enable reader mode

```yaml
website:
  reader-mode: true
```

# Playground

We've already published our package and know more about nbdev powers, let's have some fun with nbs

## Ipywidgets

![](images/monitor.png){.absolute top=0 right=0}

Let's run the UI for jupyter notebooks nb

:::{.callout-tip}
Run voila over the `03_ui_for_jupyter_notebook.ipynb` using `voila 03_ui_for_jupyter_notebook.ipynb` 
:::

## ChatGPT

![](images/monitor.png){.absolute top=0 right=0}

Let's use ChatGPT in our nbs by running the ChatGPT nb

# Conclusion

- Jupyter notebooks are awesome for quick prototyping
- Code, doc and tests can be used to tell a story and improve docs
- Jupyter notebooks & nbdev allow literate programming
- Publishing a package with nbdev is easy, faster and efficient
- Visual libraries benefit a lot from nbdev
